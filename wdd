#!/usr/bin/python

import argparse, signal, sys,daemon, socket, pwd, os, psutil, ConfigParser
from hatguy import utils
from watchdog import heartbeat
from watchdog.daemon import daemon as exec_daemon

def main():
    config = ConfigParser.SafeConfigParser()
    config.read(["/etc/wd.conf", os.path.expanduser("~/.wd.conf")])

    parser = argparse.ArgumentParser("Seamlessly monitor processes...")
    parser.add_argument("--port", default=config.getint("daemon", "PORT"), help="Port to target on server, or in the case of server, port to listen on.", type=int)
    parser.add_argument("--delay", default=0, help="Number of seconds to wait before initially contacting watchdog server.", type=int)
    parser.add_argument("-r", "--heartrate", default=config.get("client", "HEARTRATE"), help="Number of seconds between heartbeats.", type=int)
    parser.add_argument("--signature", help="Force use of a particular signature string.", type=str)
    parser.add_argument("--retry", default=config.getint("client", "MAX_ATTEMPTS"), help="Number of times to retry a beat if connection to server fails.", type=int)
    parser.add_argument("-i", "--interactive", default=False, action="store_true", help="Force daemon to execute whilst connected to terminal (useful for debugging).")
    args = parser.parse_args()

    utils.kill_ancestor(args.port)
    if args.interactive:
        exec_daemon(port=args.port, wd_port=args.port)
    else:
        with daemon.DaemonContext():
            exec_daemon(port=args.port, wd_port=args.port)

if __name__ == '__main__':
    main()
