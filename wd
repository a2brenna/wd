#!/usr/bin/python

import argparse, signal, sys,daemon, socket, heartbeat, pwd, os, psutil, utils
from wd_daemon import daemon as exec_daemon
from wd_client import client

#TODO: List of ports to use in succession in case of collisions?
DEFAULT_PORT = 7877
DEFAULT_SERVER = "taurine.csclub.uwaterloo.ca"
DEFAULT_HEARTRATE = 60
MAX_ATTEMPTS = 5

def main():
    parser = argparse.ArgumentParser("Seamlessly monitor processes...")
    parser.add_argument("-d", "--daemon", action="store_true", help="Run watchdog daemon.")
    parser.add_argument("-s", "--server", default=DEFAULT_SERVER, help="Hostname of watchdog server to use.")
    parser.add_argument("-q", "--query", action="store_true", help="Query the watchdog server to return the list of tracked signatures")
    parser.add_argument("COMMAND", nargs=argparse.REMAINDER, help="The command to be watched. Ignored if running daemon.", type=str)
    parser.add_argument("--port", default=DEFAULT_PORT, help="Port to target on server, or in the case of server, port to listen on.", type=int)
    parser.add_argument("-p", "--pid", help="Pid of a process to monitor.", type=int)
    parser.add_argument("--delay", default=0, help="Number of seconds to wait before initially contacting watchdog server.", type=int)
    parser.add_argument("-r", "--heartrate", default=DEFAULT_HEARTRATE, help="Number of seconds between heartbeats.", type=int)
    parser.add_argument("--dumpdir", default="/tmp", help="Directory to dump state files to upon request.", type=str)
    parser.add_argument("--signature", help="Force use of a particular signature string.", type=str)
    parser.add_argument("--retry", default=MAX_ATTEMPTS, help="Number of times to retry a beat if connection to server fails.", type=int)
    args = parser.parse_args()

    if args.daemon:
        utils.kill_ancestor(args.port)
        with daemon.DaemonContext():
            exec_daemon(port=DEFAULT_PORT, dumpdir=args.dumpdir, wd_server=args.server, wd_port=args.port)
    elif args.query:
            sys.stdout.write(str(heartbeat.query(server=args.server, port=args.port)))
    elif args.signature:
            heartbeat.beat(signature=args.signature, server=args.server, port=args.port)
    elif args.pid:
        pass
    else:
        client(server=args.server, target_port=args.port, command=args.COMMAND, delay=args.delay, heartrate=args.heartrate, retry=args.retry)

if __name__ == '__main__':
    main()
